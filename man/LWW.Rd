% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/LWW.R
\name{LWW}
\alias{LWW}
\title{LWW}
\usage{
LWW(y, alphas, betas, tau2s, xs, delta, lev, M = 5, Ne = 5, method = 1)
}
\arguments{
\item{y}{representa la serie de observaciones reales.}

\item{alphas}{representa los valores iniciales para el parámetro de reversión de la media en el proceso de volatilidad estocástica.}

\item{betas}{representa los valores iniciales para el parámetros de persistencia de volatilidad.}

\item{tau2s}{representa los valores iniciales para la varianza de la variable latente (volatilidad estocástica).}

\item{xs}{partículas iniciales de la variable latente a partir de la distribución a priori.}

\item{delta}{constante de ponderación para el aprendizaje de parámetros en el algoritmo Liu & West (2001).}

\item{lev}{nivel de resolución en la transformación wavelet.}

\item{M}{parámetro de la función plWav1j.}

\item{Ne}{parámetro de la función plWav1j.}

\item{method}{1 o 2, método de eliminación de ruido a partir de la transformación wavelet method = 1 (plWav1j), method = 2 (BAYES.THR).}
}
\value{
Esta funcion retorna los cuantiles (2.5\%, 50\% y 97.5\%) de
las estimaciones de la volatilidad estocástica, y sus
parámetros (\eqn{\alpha}, \eqn{\beta} y \eqn{\tau^2}) a partir de las
partículas libre de ruido.
}
\description{
Esta funcion calcula el modelo de volatilidad estocástica basada en el filtro de partículas de Liu & West (2001)
el algoritmo incorpora los pasos de empuje bayesianos basados en la transformación wavelet.
bayeShrinkPL, metodología propuesta para la eliminación de ruido aditivo basado en particle learning en la transformación wavelet.
BAYES.THR, metodología de  Abramovich et al. (1998) para la eliminación de ruido aditivo basado en la transformación wavelet.
}
\examples{
# Ejemplo de aplicación del filtro de Liu West con empuje basado en wavelet
\dontrun{
library(wavethresh)

rlike <- function(x){rnorm(1,0,exp(x/2))}
n     =  2^10
alpha =  -0.004
beta  =  0.985
tau2  =  0.1
tau   = sqrt(tau2)
y1     = rep(0,n)
x1     = rep(0,n)
x1[1]  = alpha/(1-beta)
y1[1]  = rlike(x1[1])
set.seed(116)
for (t in 2:n){
  x1[t] = rnorm(1,alpha+beta*x1[t-1],tau)
  y1[t] = rlike(x1[t])
}

alpha.true<-alpha
beta.true<-beta
tau2.true<-tau2

N=2^11
delta<-0.975
lev<-3:6

m0<-0.0;C0<-0.1;sC0<-sqrt(C0)
ealpha<-alpha;valpha<-0.01
ephi<-beta;vphi<-0.01
nu<-3;lambda<-tau2

xs<-rnorm(N,m0,sC0)

alphas<-rnorm(N,ealpha,sqrt(valpha))
betas<-rnorm(N,ephi,sqrt(vphi))
tau2s<-1/rgamma(N,nu/2,nu*lambda/2)
rest2<-LWW(y1,alphas,betas,tau2s,xs,delta,lev[1],M=2,method=1)
rest2
}
}
\author{
Omar Rios Saavedra, \email{orioss@unal.edu.co}
}
